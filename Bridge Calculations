clear; close all;
%% 0. Initialize Parameters

L = 1200; % Length of bridge
n = 1200; % Discretize into 1 mm seg.
P = 400; % Total weight of train [N]
x = linspace(0, L, n); % x-axis

%% 1. SFD, BMD under train loading

x_train = [52 228 392 568 732 908]; % Train Load Locations
x_train = x_train - 908;
P_train = [90 90 66.666666 66.666666 66.666666 66.666666]; %* P/6;
n_train = 2056; % num of train locations
spacing_between_locs = L./n;
SFDi = zeros(n_train, n); % 1 SFD for each train loc.
BMDi = zeros(n_train, n); % 1 BMD for each train loc.
% Solve for SFD and BMD with the train at different locations

w = zeros(1, L);      % applied loads
cur_spot_on_bridge = 0;
while (x_train(1) <= 1199)
    cur_spot_on_bridge = cur_spot_on_bridge + 1;
% start location of train
    x_train  = x_train + spacing_between_locs; 
% sum of moments at A eqn
    w(:) = 0;  % Reset w
    By = 0;    % Reaction force By
    t_w_on_b = 0;    % train_weight_on_bridge 
    for i = 1:6
        if x_train(i) > 0 & x_train(i) <= L  % ensures to only add weight if wheels are on bridge
            By = By + P_train(i).*(x_train(i)./1000); % Calculats By in [N*m]

            t_w_on_b = t_w_on_b + P_train(i);   
        end
    end
    By = By./(L./1000);  % Reaction force By in [N]

% sum of Fy eqn

    Ay = t_w_on_b - By;    % Calculates the reaction force at A in [N]

% construct applied loads
% w(x)
    for i = 1:L
        for j = 1:6
            if x_train(j) == i
                w(i) = -P_train(j);
            end
        end
    end
    % first index will be Ay, following indices will be applied loads
    w(1) = w(1) + Ay;
    %last index will be By
    w(L) = w(L) + By;

    % SFD = num. integral(w)
    SFDi(cur_spot_on_bridge,:) = cumsum(w);
    % BMD = num. integral(SFD)
    BMDi(cur_spot_on_bridge,:) = cumsum(SFDi(cur_spot_on_bridge,:));
end
SFD = max(abs(SFDi)); % SFD envelope
BMD = max(BMDi); % BMD envelope


%% 2. Define Bridge Parameters
% = xc, tfw, tft, gfw, gft, wfw, wft, gfw2, gft2, bfw, bft
% length of bridge (can modify)
L = 1200
% parameter for interpolating each parameter
% if there is a change in cross section, might need add an extra row for interp1 to interpolate linearly
% e.g. Change @ 400mm: (400, cross section 1), (401, cross section 2)
x = linspace(0,1000,1)
param = [0, 100, 1.27, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27;
400, 100, 1.27, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27; 
800, 100, 1.27, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27; 
L, 100, 1.27, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27]

%x_c Location, x, of cross-section change
%tfw Top Flange Width
%tft Top Flange Thickness
%gfw Glue Flange Width
%gft Glue Flange Thickness
%wfw Wing Flange Width
%wft Wing Flange Thickness
%gfw2 Glue Flange Width (bottom)
%gft2 Glue Flange Thickness (bottom)
%bfw Bottom Flange Width
%bft Bottom Flange Thickness                                                                                                                                    

% Extracting user input assuming linear relationship
tfw = interp1(param(:,1), param(:,2), x);
tft = interp1(param(:,1), param(:,3), x);
gfw = interp1(param(:,1), param(:,4), x);
gft = interp1(param(:,1), param(:,5), x);
wfw = interp1(param(:,1), param(:,6), x);
wft = interp1(param(:,1), param(:,7), x);
gfw2 = interp1(param(:,1), param(:,8), x);
gft2 = interp1(param(:,1), param(:,9), x);
bfw = interp1(param(:,1), param(:,10), x);
bft = interp1(param(:,1), param(:,11), x);

%% 3. Calculate Sectional Properties
% ybar. location of centroidal axis from the bottom
height = tft + gft + wft + gft2 + bft
total_area = tfw * tft + 2 * gfw * gft + 2 * wfw * wft + 2 * gfw2 * gft2 + bfw * bft
total_area_height = bfw * bft * (bft/2) + 2 * gfw2 * gft2 * (bft + gft2/2) + 2 * wfw * wft * (bft + gft2 + wft/2) + 2 * gfw * gft * (bft + gft2 + wft + gft/2) + tfw * tft * (bft + gft2 + wft + gft + tft/2)
ybar = total_area_height / total_area 
ybot = ybar 
ytop = height - ybar

% I
I_bars = 1 / 12 * (tfw * tft^3 + 2 * gfw * gft^3 + 2 * wfw * wft^3 + 2 * gfw2 * gft2^3 + bfw * bft^3)
I_parallel = bfw * bft * (ybar - (bft/2))^2 + 2 * gfw2 * gft2 * (ybar - (bft + gft2/2))^2 + 2 * wfw * wft * (ybar - (bft + gft2 + wft/2))^2 + 2 * gfw * gft * (ybar - (bft + gft2 + wft + gft/2))^2 + tfw * tft * (ybar - (bft + gft2 + wft + gft + tft/2))^2
I_total = I_bars + I_parallel   

% Q at centroidal axes

% this formula is sketchy because I don't know if the centroid will cross
% the wing in every cross section design... probably double check this
% value
Qcent_top = tfw * tft * (ytop - tft/2) + 2 * gfw * gft * (ytop - tft - gft/2) + 2 * wfw * wft * (ytop - tft - gft)/2
Qcent_bot = bfw * bft * (ybot - bft/2) + 2 * gfw2 * gft2 * (ybot - bft - gft2/2) + 2 * wfw * wft * (ybot - bft - gft2)/2
% Q from top should be equal to bottom, so check if these values are same

% Q at glue location (top glue tab)
Qglue = tfw * tft * (ytop - tft/2)


%% 4. Calculate Applied Stress
S_top = max(BMD).*(h - ybar)/I; %top bending stress
S_bot = max(BMD).*(ybar)/I; %bottom bending stress
T_cent = (max(SFD).*Q_cent)/(I*b_cent); %centriod shear stress
T_glue = (max(SFD).*Q_glue)/(I*b_glue); %glue shear stress

%% 5. Material and Thin Plate Buckling Capacities
E = 4000;
mu = 0.2;
%S_tens =
%S_comp =
%T_max =
%T_gmax =
%S_buck1 =
%S_buck2 =
%S_buck3 =
%T_buck =

% 6. FOS
FOS_tens = t_allowable./S_top
FOS_comp = c_allowable./S_bot
FOS_shear = shear_allowable./T_cent
FOS_glue = glue_allowable./T_glue
FOS_buck1 = case1./ S_top
FOS_buck2 = case2./ S_top
FOS_buck3 = case3./ S_top
FOS_buckV = case4./ V_cent

%% 7. Min FOS and the failure load Pfail
%minFOS =
%Pf =

%% 8. Vfail and Mfail
%Mf_tens =
%Mf_comp =
%Vf_shear =
%Vf_glue =
%Mf_buck1 =
%Mf_buck2 =
%Mf_buck3 =
%Vf_buckV =
%% 9. Output plots of Vfail and Mfail
% subplot(2,3,1)
% hold on; grid on; grid minor;
% plot(x, Vf_shear, 'r')
% plot(x, -Vf_shear.* SFD, 'r')
plot(x, SFDi(1080,:), 'k')
plot(x, BMDi(1080,:), 'k')
% plot([0, L], [0, 0], 'k', 'LineWidth', 2)
% legend('Matboard Shear Failure')
% xlabel('Distance along bridge (mm)')
% ylabel('Shear Force (N)')
