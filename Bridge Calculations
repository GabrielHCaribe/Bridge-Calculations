clear; close all;
%% 0. Initialize Parameters

L = 1200; % Length of bridge
n = 1200; % Discretize into 1 mm seg.
P = 400; % Total weight of train [N]
% x = linspace(0, L, n); % x-axis

%% 1. SFD, BMD under train loading

x_train = [52 228 392 568 732 908]; % Train Load Locations
x_train = x_train - 908;
P_train = [90 90 66.6666666 66.6666666 66.6666666 66.6666666];% * P/6;
n_train = n + 856; % num of train locations
spacing_between_locs = L./n;
SFDi = zeros(n_train, L); % 1 SFD for each train loc.
BMDi = zeros(n_train, L); % 1 BMD for each train loc.
% Solve for SFD and BMD with the train at different locations

w = zeros(1, L);      % applied loads
cur_spot_on_bridge = 0;
while (x_train(1) <= 1199)
    cur_spot_on_bridge = cur_spot_on_bridge + 1;
% start location of train
    x_train  = x_train + spacing_between_locs; 
% sum of moments at A eqn
    w(:) = 0;  % Reset w
    By = 0;    % Reaction force By
    t_w_on_b = 0;    % train_weight_on_bridge 
    for i = 1:6
        if x_train(i) > 0 & x_train(i) <= L  % ensures to only add weight if wheels are on bridge
            By = By + P_train(i).*(x_train(i)./1000); % Calculats By in [N]

            t_w_on_b = t_w_on_b + P_train(i);   
        end
    end
    By = By./(L./1000);  % Reaction force By in [N]

% sum of Fy eqn

    Ay = t_w_on_b - By;    % Calculates the reaction force at A in [N]

% construct applied loads
% w(x)
    for i = 1:L
        for j = 1:6
            if x_train(j) == i
                w(i) = -P_train(j);
            end
        end
    end
    % first index will be Ay, following indices will be applied loads
    w(1) = w(1) + Ay;
    %last index will be By
    w(L) = w(L) + By;

    % SFD = num. integral(w)
    SFDi(cur_spot_on_bridge,:) = cumsum(w);
    % BMD = num. integral(SFD)
    BMDi(cur_spot_on_bridge,:) = cumsum(SFDi(cur_spot_on_bridge,:));
end
SFD = max(abs(SFDi)); % SFD envelope
BMD = max(BMDi); % BMD envelope
%% 2. Define Bridge Parameters

%x_c Location, x, of cross-section change
%tfw Top Flange Width
%tft Top Flange Thickness
%tfw_2 Top Subflange Width
%tft_2 Top Subflange Thickness
%gfw Glue Flange Width
%gft Glue Flange Thickness
%wfw Wing Flange Width
%wft Wing Flange Thickness
%gfw2 Glue Flange Width (bottom)
%gft2 Glue Flange Thickness (bottom)
%bfw Bottom Flange Width
%bft Bottom Flange Thickness 

% % parameter for interpolating each parameter
% % if there is a change in cross section, might need add an extra row for interp1 to interpolate linearly
% % e.g. Change @ 400mm: (400, cross section 1), (401, cross section 2)
x = linspace(0,1000,1);

% Design 0 x_c tfw tft tfw_2 tft_2 gfw gft  wfw  wft gfw2 gft2 bfw bft
% param = [0, 100, 1.27, 0, 0, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27;
% 400, 100, 1.27, 0, 0, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27; 
% 800, 100, 1.27, 0, 0, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27; 
% L, 100, 1.27, 0, 0, 6.27, 1.27, 1.27, 72.46, 0, 0, 80, 1.27];

% Design 1
% param = [0, 100, 3.81, 0, 0, 7.54, 1.27, 2.54, 83.73, 0, 0, 0, 0;
% L, 100, 3.81, 0, 0, 7.54, 1.27, 2.54, 83.73, 0, 0, 0, 0;];

% Design 2
param = [0, 100, 3.81, 0, 0, 11.27, 1.27, 1.27, 94.92, 11.27, 1.27, 75, 1.27;
L, 100, 3.81, 0, 0, 11.27, 1.27, 1.27, 94.92, 11.27, 1.27, 75, 1.27;];

% design 3
% param = [0, 100, 2.54, 0, 0, 6.27, 1.27, 1.27, 100, 0, 0, 75, 1.27;
% L, 100, 2.54, 0, 0, 6.27, 1.27, 1.27, 100, 0, 0, 75, 1.27;]


% design 4
% param = [0, 100, 1.27, 75, 1.27, 6.27, 1.27, 1.27, 113.65, 6.27, 1.27, 75, 1.27;
% L, 100, 1.27, 75, 1.27, 6.27, 1.27, 1.27, 113.65, 6.27, 1.27, 75, 1.27;]


% design 5
% param = [0, 100, 2.54, 75, 1.27, 6.27, 1.27, 1.27, 112.38, 6.27, 1.27, 75, 1.27;
% L, 100, 2.54, 75, 1.27, 6.27, 1.27, 1.27, 112.38, 6.27, 1.27, 75, 1.27;]


% design 6
% param = [0, 100, 1.27, 75, 2.54, 6.27, 1.27, 1.27, 112.38, 6.27, 1.27, 75, 1.27;
% L, 100, 1.27, 75, 2.54, 6.27, 1.27, 1.27, 112.38, 6.27, 1.27, 75, 1.27;]

% design 7
% param = [0, 100, 3.81, 75, 1.27, 6.27, 1.27, 1.27, 71.11, 6.27, 1.27, 75, 1.27;
% L, 100, 3.81, 75, 1.27, 6.27, 1.27, 1.27, 71.11, 6.27, 1.27, 75, 1.27;]

%find if there is enough material
col = numel(param)/length(param);
vol = 0;
% may need to use 1:2:col-1 if there are changes in cross section
for i = 1:col-1
    if i ~= col-1
        len = param(i+1,1) - param(i,1);
    else
        len = 1260 - param(i,1);
    end
    for j = 2:2:length(param)-1
        if j == 6 || j == 8 || j == 10 
            vol = vol + 2*len*param(i,j)*param(i,j+1);
        else 
            vol = vol + len*param(i,j)*param(i,j+1);
        end 
    end 
end
area = vol/1.27;
disp(area)

if (area < 826008)
    disp("Enough matboard")
else
    disp("Not enough matboard")
end                                                                                                                                   

% Extracting user input assuming linear relationship
tfw = interp1(param(:,1), param(:,2), x);
tft = interp1(param(:,1), param(:,3), x);
tfw_2 = interp1(param(:,1), param(:,4), x);
tft_2 = interp1(param(:,1), param(:,5), x);
gfw = interp1(param(:,1), param(:,6), x);
gft = interp1(param(:,1), param(:,7), x);
wfw = interp1(param(:,1), param(:,8), x);
wft = interp1(param(:,1), param(:,9), x);
gfw2 = interp1(param(:,1), param(:,10), x);
gft2 = interp1(param(:,1), param(:,11), x);
bfw = interp1(param(:,1), param(:,12), x);
bft = interp1(param(:,1), param(:,13), x);

%% 3. Calculate Sectional Properties
% ybar. location of centroidal axis from the bottom
height = tft + tft_2 + gft + wft + gft2 + bft;
total_area = tfw * tft + tfw_2 * tft_2 + 2 * gfw * gft + 2 * wfw * wft + 2 * gfw2 * gft2 + bfw * bft;
total_area_height = bfw * bft * (bft/2) + tfw_2 * tft_2 * (bft + tft_2/2) + 2 * gfw2 * gft2 * (bft + tft_2 + gft2/2) + 2 * wfw * wft * (bft + tft_2 + gft2 + wft/2) + 2 * gfw * gft * (bft + tft_2 + gft2 + wft + gft/2) + tfw * tft * (bft + tft_2 + gft2 + wft + gft + tft/2);
ybar = total_area_height / total_area ;
ybot = ybar ;
ytop = height - ybar;

% I
I_bars = 1 / 12 * (tfw * tft^3 + tfw_2 * tft_2^3 + 2 * gfw * gft^3 + 2 * wfw * wft^3 + 2 * gfw2 * gft2^3 + bfw * bft^3);
I_parallel = bfw * bft * (ybar - (bft/2))^2 + 2 * gfw2 * gft2 * (ybar - (bft + gft2/2))^2 + 2 * wfw * wft * (ybar - (bft + gft2 + wft/2))^2 + 2 * gfw * gft * (ybar - (bft + gft2 + wft + gft/2))^2 + tfw_2 * tft_2 * (ybar - (bft + gft2 + wft + gft + tft_2/2))^2 + tfw * tft * (ybar - (bft + gft2 + wft + gft + tft_2 + tft/2))^2;
I_total = I_bars + I_parallel;

% Q at centroidal axes
Qcent_top = tfw * tft * (ytop - tft/2) + tfw_2 * tft_2 * (ytop - tft - tft_2/2) + 2 * gfw * gft * (ytop - tft - tft_2 - gft/2) + 2 * wfw * (ytop - tft - tft_2 - gft) * (ytop - tft - tft_2 - gft)/2;
Qcent_bot = bfw * bft * (ybot - bft/2) + 2 * gfw2 * gft2 * (ybot - bft - gft2/2) + 2 * wfw * (ybot - bft - gft2) * (ybot - bft - gft2)/2;

% Q at glue location (top glue tab)
Qglue = tfw * tft * (ytop - tft/2);

%% 4. Calculate Applied Stress
S_top = max(BMD).*(height - ybar)/I_total; %top bending stress
S_bot = max(BMD).*(ybar)/I_total; %bottom bending stress
b_cent = 1.27*2;
T_cent = (max(SFD).*Qcent_top)/(I_total*b_cent); %centriod shear stress
b_glue = 10*2;
T_glue = (max(SFD).*Qglue)/(I_total*b_glue); %glue shear stress
%% 5. Material and Thin Plate Buckling Capacities
E = 4000;
mu = 0.2;
S_tens = 30;
S_comp = 6;
T_max = 4;
T_gmax = 2;

t1 = tft+tft_2;
b1 = 75; % distance between flanges
S_buck1 = ((4.*(pi^2).*E)/(12.*(1-((mu)^2)))).*((t1./b1)^2);
t2 = tft+tft_2;
b2 = 12.5;
S_buck2 = ((0.425.*(pi^2).*E)/(12.*(1-((mu)^2)))).*((t2./b2)^2);
t3 = 1.27;
b3 = ytop - t1;
S_buck3 = ((6.*(pi^2).*E)/(12.*(1-((mu)^2)))).*((t3./b3)^2);
t4 = 1.27;
h = 94.92;
a = 300;
T_buck = ((5.*(pi^2).*E)/(12.*(1-((mu)^2)))).*(((t4./h)^2) + ((t4./a)^2));
%% 6. FOS
FOS_tens = S_tens./S_bot;
FOS_comp = S_comp./S_top;
FOS_shear = T_max./T_cent;
FOS_glue = T_gmax./T_glue;
FOS_buck1 = S_buck1./ S_top;
FOS_buck2 = S_buck2./ S_top;
FOS_buck3 = S_buck3./ S_top;
FOS_buckV = T_buck./ T_cent;
%% 7. Min FOS and the failure load Pfail
minFOS = min([FOS_tens, FOS_comp, FOS_shear, FOS_glue, FOS_buck1, FOS_buck2, FOS_buck3, FOS_buckV]);
Pf = P .* minFOS;
%% 8. Vfail and Mfail
line = ones(1, n-1);    % Allows values to be plotted
Mf_tens = FOS_tens.*max(BMD) .* line;    
Mf_comp = FOS_comp.*max(BMD) .* line;
Vf_shear = FOS_shear.*max(SFD) .* line;
Vf_glue = FOS_glue.*max(SFD) .* line;
Mf_buck1 = FOS_buck1.*max(BMD) .* line;
Mf_buck2 = FOS_buck2.*max(BMD) .* line;
Mf_buck3 = FOS_buck3.*max(BMD) .* line;
Vf_buckV = FOS_buckV.*max(SFD) .* line;
%% 9. Output plots of Vfail and Mfail
x = linspace(0, L, n-1);

subplot(2,3,1)
hold on; grid on; grid minor;
plot(x, Vf_shear.*line, 'r')
plot(x, SFD(1,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Matboard Shear Failure', 'Absolute Value of Max Shear Force')
xlabel('Distance along bridge (mm)')
ylabel('Shear Force (N)')

hold off
subplot(2,3,2)
hold on; grid on; grid minor;
plot(x, Vf_glue, 'r')
plot(x, SFD(:,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Glue Shear Failure', 'Absolute Value of Max Shear Force')
xlabel('Distance along bridge (mm)')
ylabel('Shear Force (N)')
title("Shear Force Diagram vs Shear Force Capacities", " ")

hold off
subplot(2,3,3)
hold on; grid on; grid minor;
plot(x, Vf_buckV, 'r')
plot(x, SFD(:,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Matboard Shear Buckling Failure', 'Absolute Value of Max Shear Force' )
xlabel('Distance along bridge (mm)')
ylabel('Shear Force (N)')

hold off
subplot(2,3,4)
hold on; grid on; grid minor;
plot(x, Mf_tens, 'r')
plot(x, Mf_comp, 'b')
plot(x, BMD(:,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Matboard Tension Failure', 'Matboard Compression Failure', 'Max Bending Moment')
xlabel('Distance along bridge (mm)')
ylabel('Bending Moment (N*mm)')

hold off
subplot(2,3,5)
hold on; grid on; grid minor;
plot(x, Mf_buck1, 'r')
plot(x, Mf_buck2, 'b')
plot(x, BMD(:,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Matboard Buckling Failure, Top Flange - Mid', 'Matboard Buckling Failure, Top Flange - Sides', 'Max Bending Moment')
xlabel('Distance along bridge (mm)')
ylabel('Bending Moment (N*mm)')
title("Bending Moment Diagram vs Bending Moment Capacities", " ")

hold off
subplot(2,3,6)
hold on; grid on; grid minor;
plot(x, Mf_buck3, 'r')
plot(x, BMD(:,1:end-1), 'k')
plot([0, L], [0, 0], 'k', 'LineWidth', 2)
legend('Matboard Buckling Failure, Webs', 'Max Bending Moment')
xlabel('Distance along bridge (mm)')
ylabel('Bending Moment (N*mm)')
