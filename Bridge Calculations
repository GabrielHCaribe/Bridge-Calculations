clear; close all;
%% 0. Initialize Parameters

L = 1200; % Length of bridge
n = 1200; % Discretize into 1 mm seg.
P = 400; % Total weight of train [N]
x = linspace(0, L, n); % x-axis

%% 1. SFD, BMD under train loading

x_train = [52 228 392 568 732 908]; % Train Load Locations
x_train = x_train - 908;
P_train = [90 90 66.666666 66.666666 66.666666 66.666666]; %* P/6;
n_train = 2056; % num of train locations
spacing_between_locs = L./n;
SFDi = zeros(n_train, n); % 1 SFD for each train loc.
BMDi = zeros(n_train, n); % 1 BMD for each train loc.
% Solve for SFD and BMD with the train at different locations

w = zeros(1, L);      % applied loads
cur_spot_on_bridge = 0;
while (x_train(1) <= 1199)
    cur_spot_on_bridge = cur_spot_on_bridge + 1;
% start location of train
    x_train  = x_train + spacing_between_locs; 
% sum of moments at A eqn
    w(:) = 0;  % Reset w
    By = 0;    % Reaction force By
    t_w_on_b = 0;    % train_weight_on_bridge 
    for i = 1:6
        if x_train(i) > 0 & x_train(i) <= L  % ensures to only add weight if wheels are on bridge
            By = By + P_train(i).*(x_train(i)./1000); % Calculats By in [N*m]

            t_w_on_b = t_w_on_b + P_train(i);   
        end
    end
    By = By./(L./1000);  % Reaction force By in [N]

% sum of Fy eqn

    Ay = t_w_on_b - By;    % Calculates the reaction force at A in [N]

% construct applied loads
% w(x)
    for i = 1:L
        for j = 1:6
            if x_train(j) == i
                w(i) = -P_train(j);
            end
        end
    end
    % first index will be Ay, following indices will be applied loads
    w(1) = w(1) + Ay;
    %last index will be By
    w(L) = w(L) + By;

    % SFD = num. integral(w)
    SFDi(cur_spot_on_bridge,:) = cumsum(w);
    % BMD = num. integral(SFD)
    BMDi(cur_spot_on_bridge,:) = cumsum(SFDi(cur_spot_on_bridge));
end
SFD = max(abs(SFDi)); % SFD envelope
BMD = max(BMDi); % BMD envelope
%% 2. Define Bridge Parameters
% = xc, bft, tft,
%param = [0, 100, 1.27, ...
%400, 100, 1.27, ...
%800, 100, 1.27, ...
%L, 100, 1.27,
%x_c Location, x, of cross-section change
%bft Top Flange Width
%tft Top Flange Thickness
% Extracting user input assuming linear relationship
%bft = interp1(param(:,1), param(:,2), x);
%tft = interp1(param(:,1), param(:,3), x);
%% 3. Calculate Sectional Properties
% ybar. location of centroidal axis from the bottom
%ybar =
%ybot =
%ytop =
% I
%I =
% Q at centroidal axes
%Qcent =
% Q at glue location
%Qglue =
%% 4. Calculate Applied Stress
%S_top =
%S_bot =
%T_cent =
%T_glue =
%% 5. Material and Thin Plate Buckling Capacities
E = 4000;
mu = 0.2;
%S_tens =
%S_comp =
%T_max =
%T_gmax =
%S_buck1 =
%S_buck2 =
%S_buck3 =
%T_buck =
%% 6. FOS
%FOS_tens =
%FOS_comp =
%FOS_shear =
%FOS_glue =
%FOS_buck1 =
%FOS_buck2 =
%FOS_buck3 =
%FOS_buckV =
%% 7. Min FOS and the failure load Pfail
%minFOS =
%Pf =
%% 8. Vfail and Mfail
%Mf_tens =
%Mf_comp =
%Vf_shear =
%Vf_glue =
%Mf_buck1 =
%Mf_buck2 =
%Mf_buck3 =
%Vf_buckV =
%% 9. Output plots of Vfail and Mfail
% subplot(2,3,1)
% hold on; grid on; grid minor;
% plot(x, Vf_shear, 'r')
% plot(x, -Vf_shear.* SFD, 'r')
plot(x, SFDi(1080,:), 'k');
% plot([0, L], [0, 0], 'k', 'LineWidth', 2)
% legend('Matboard Shear Failure')
% xlabel('Distance along bridge (mm)')
% ylabel('Shear Force (N)')
